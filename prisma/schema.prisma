generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemRole {
  ADMIN
  CUSTOMER
}

enum MembershipRole {
  OWNER
  MANAGER
  MEMBER
}

enum MembershipStatus {
  PENDING
  JOINED
  ACTIVE
  DISABLED
}

model User {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  deletedAt      DateTime?
  name           String?
  email          String       @unique
  emailVerified  DateTime?
  accounts       Account[]
  sessions       Session[]
  hashedPassword String
  image          String?
  role           SystemRole   @default(CUSTOMER)
  memberships    Membership[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tenant {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  name        String
  projects    Project[]
  memberships Membership[]
}

model Membership {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  deleledAt DateTime?
  tenantId  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  user      User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role      MembershipRole   @default(MEMBER)
  status    MembershipStatus @default(PENDING)

  @@unique([tenantId, userId])
}

model Project {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  domain      String    @unique
  description String?
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  apiKeys     ApiKey[]
  results     Result[]

  @@index([tenantId])
}

model ApiKey {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  description     String?
  publicKey       String    @unique
  hashedSecretKey String    @unique
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index(projectId)
  @@index(publicKey)
}

model Result {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  engineName String
  result     String // clean, malicious, suspicious, etc.
  category   String? // type of threat if malicious
  method     String? // detection method used
  disputedAt DateTime? // when dispute was sent
  resolvedAt DateTime? // when issue was resolved

  @@index([projectId, engineName])
}
