name: Deploy Preview

on:
  pull_request:
    types:
      - opened
      - reopened

env:
  ORG_NAME: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  BRANCH_NAME: ${{ github.head_ref }}
  COMPOSE_PATH: './docker/compose.prod.yaml'
  APP_NAME: pr-${{ github.event.number }}-${{ github.event.repository.name }}

jobs:
  deploy-preview:
    name: Deploy Preview
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Generate secrets
        id: generate-secrets
        run: |
          echo "POSTGRES_PASSWORD=$(LC_CTYPE=C tr -d -c '[:alnum:]' </dev/urandom | head -c 15)" >> $GITHUB_ENV
          echo "POSTGRES_PORT=$(shuf -i 55000-55999 -n 1)" >> $GITHUB_ENV
          echo "AUTH_SECRET=$(openssl rand -base64 32)" >> $GITHUB_ENV

      - name: Convert Env String
        id: convert-env
        run: |
          ENV_STRING_RAW=$(cat << 'EOF'
          POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          POSTGRES_PORT=${{ env.POSTGRES_PORT }}
          AUTH_SECRET=${{ env.AUTH_SECRET }}
          AUTH_URL=https://${{ env.APP_NAME }}.sieutoc.app
          POSTMARK_API_KEY=${{ '${{project.POSTMARK_API_KEY}}' }}
          FROM_EMAIL=${{ '${{project.FROM_EMAIL}}' }}
          OPENAI_API_KEY=${{ '${{project.OPENAI_API_KEY}}' }}
          OPENAI_API_BASE_URL=${{ '${{project.OPENAI_API_BASE_URL}}' }}
          OPENAI_MODEL=${{ '${{project.OPENAI_MODEL}}' }}
          EOF
          )
          ENV_STRING_ESCAPED="${ENV_STRING_RAW//$'\n'/\\n}"
          echo "env_string=${ENV_STRING_ESCAPED}" >> $GITHUB_OUTPUT

      - name: Create New Compose
        run: |
          CREATED_RESPONSE=$(curl -X POST "${{ vars.DOKPLOY_URL }}/api/compose.create" \
          -H "x-api-key: ${{ secrets.DOKPLOY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "${{ env.APP_NAME }}",
            "projectId": "${{ vars.PROJECT_ID }}",
            "appName":"${{ env.APP_NAME }}",
            "composeType": "docker-compose",
            "serverId": null
          }')
          echo "COMPOSE_ID=$(echo $CREATED_RESPONSE | jq -r '.composeId')" >> $GITHUB_ENV

      - name: Update Compose
        run: |
          curl -X POST '${{ vars.DOKPLOY_URL }}/api/compose.update' \
          -H "x-api-key: ${{ secrets.DOKPLOY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "composeId":"${{ env.COMPOSE_ID }}",
            "env": "${{ steps.convert-env.outputs.env_string }}",
            "composePath":"${{ env.COMPOSE_PATH }}",
            "githubId":"${{ vars.NODE_GITHUB_ID }}",
            "branch":"${{ env.BRANCH_NAME }}",
            "repository":"${{ env.REPO_NAME }}",
            "owner":"${{ env.ORG_NAME }}",
            "sourceType":"github",
            "composeStatus":"idle"
          }'

      - name: Create New Domain
        run: |
          curl -X POST '${{ vars.DOKPLOY_URL }}/api/domain.create' \
          -H "x-api-key: ${{ secrets.DOKPLOY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "host": "${{ env.APP_NAME }}.sieutoc.app",
            "path": "/",
            "port": 3000,
            "https": true,
            "applicationId": null,
            "certificateType": "letsencrypt",
            "composeId": "${{ env.COMPOSE_ID }}",
            "serviceName": "${{ env.REPO_NAME }}-nextjs",
            "domainType": "compose"
          }'

      - name: Deploy Compose
        run: |
          curl -X POST '${{ vars.DOKPLOY_URL }}/api/compose.deploy' \
          -H "x-api-key: ${{ secrets.DOKPLOY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "composeId":"${{ env.COMPOSE_ID }}"
           }'

      - name: Create workflow data file
        run: |
          cat > deploy-preview-data.json << EOF
          {
            "compose_id": "${{ env.COMPOSE_ID }}",
            "app_name": "${{ env.APP_NAME }}",
            "postgres_password": "${{ env.POSTGRES_PASSWORD }}",
            "postgres_port": "${{ env.POSTGRES_PORT }}"
          }
          EOF

      - name: Upload workflow data
        uses: actions/upload-artifact@v4
        with:
          name: deploy-preview-data
          path: deploy-preview-data.json
          retention-days: 1
          if-no-files-found: error
          overwrite: true
